# Generated by Django 5.2.1 on 2025-07-24 19:18

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('content', '0002_alter_layout_options_asset_checksum_asset_metadata_and_more'),
        ('players', '0003_devicelog'),
        ('playlists', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='playlistitem',
            options={'ordering': ['zone', 'order'], 'verbose_name': 'Playlist Item', 'verbose_name_plural': 'Playlist Items'},
        ),
        migrations.AlterUniqueTogether(
            name='playlistitem',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='playlist',
            name='merge_alternate_assets',
            field=models.BooleanField(default=False, help_text='Merge alternate assets from different playlists'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='ticker_position',
            field=models.CharField(choices=[('bottom', 'Bottom'), ('top', 'Top')], default='bottom', max_length=10),
        ),
        migrations.AddField(
            model_name='playlistitem',
            name='asset_ticker',
            field=models.TextField(blank=True, help_text='Asset-specific ticker message (overrides playlist ticker)'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='ad_interval',
            field=models.PositiveIntegerField(blank=True, help_text='Advertisement interval in seconds (for ad playlists)', null=True),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='is_advertisement',
            field=models.BooleanField(default=False, help_text='Advertisement playlist with interval timer'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='repeat_enabled',
            field=models.BooleanField(default=True, help_text='Repeat playlist when finished'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='shuffle_enabled',
            field=models.BooleanField(default=False, help_text='Shuffle assets before playback'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='ticker_speed',
            field=models.PositiveIntegerField(default=5, help_text='Ticker scroll speed (1=slow, 10=fast)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='ticker_text',
            field=models.TextField(blank=True, help_text='Static ticker text or RSS feed URL'),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='duration',
            field=models.PositiveIntegerField(default=10, help_text='Duration in seconds (for non-video assets)'),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='fullscreen',
            field=models.BooleanField(default=False, help_text='Display asset in fullscreen mode'),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='order',
            field=models.PositiveIntegerField(default=0, help_text='Display order within zone'),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='transition_effect',
            field=models.CharField(choices=[('none', 'None'), ('fade', 'Fade'), ('slide', 'Slide'), ('zoom', 'Zoom'), ('dissolve', 'Dissolve')], default='none', max_length=20),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='zone',
            field=models.CharField(default='main', help_text='Layout zone: main, side, bottom, zone1, zone2, zone3, zone4', max_length=20),
        ),
        migrations.AlterUniqueTogether(
            name='playlistitem',
            unique_together={('playlist', 'asset', 'zone', 'order')},
        ),
        migrations.CreateModel(
            name='PlaylistSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(help_text='Daily start time (e.g., 08:00)')),
                ('end_time', models.TimeField(help_text='Daily end time (e.g., 18:00)')),
                ('days_of_week', models.JSONField(default=list, help_text='List of weekdays [1,2,3,4,5] for Mon-Fri')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('priority', models.PositiveIntegerField(default=1, help_text='Higher number = higher priority')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlist_schedules', to='players.group')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='playlists.playlist')),
            ],
            options={
                'verbose_name': 'Playlist Schedule',
                'verbose_name_plural': 'Playlist Schedules',
                'ordering': ['-priority', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('played_at', models.DateTimeField(auto_now_add=True)),
                ('duration_played', models.PositiveIntegerField(help_text='Seconds played')),
                ('completed', models.BooleanField(default=False)),
                ('items_played', models.PositiveIntegerField(default=0)),
                ('errors_count', models.PositiveIntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='players.player')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='playlists.playlist')),
            ],
            options={
                'verbose_name': 'Playlist Stats',
                'verbose_name_plural': 'Playlist Stats',
                'ordering': ['-played_at'],
            },
        ),
    ]

# Generated by Django 5.2.1 on 2025-07-24 08:24

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('playlists', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('sync_interval', models.PositiveIntegerField(default=300)),
                ('resolution', models.CharField(choices=[('1920x1080', '1920x1080 (Full HD)'), ('1280x720', '1280x720 (HD)'), ('1024x768', '1024x768 (XGA)'), ('800x600', '800x600 (SVGA)')], default='1920x1080', max_length=20)),
                ('orientation', models.CharField(choices=[('landscape', 'Landscape'), ('portrait', 'Portrait')], default='landscape', max_length=10)),
                ('audio_enabled', models.BooleanField(default=True)),
                ('tv_control', models.BooleanField(default=False, help_text='Enable CEC TV control')),
                ('screenshot_interval', models.PositiveIntegerField(default=3600, help_text='Screenshot interval in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_playlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_for_groups', to='playlists.playlist')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(help_text='16-digit hexadecimal device identifier', max_length=16, unique=True, validators=[django.core.validators.RegexValidator(message='Device ID must be exactly 16 hexadecimal characters', regex='^[0-9A-Fa-f]{16}$')])),
                ('name', models.CharField(max_length=100)),
                ('mac_address', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Invalid MAC address format', regex='^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$')])),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('error', 'Error'), ('syncing', 'Syncing')], default='offline', max_length=10)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('player_version', models.CharField(blank=True, max_length=20)),
                ('hardware_info', models.JSONField(blank=True, default=dict)),
                ('custom_resolution', models.CharField(blank=True, max_length=20)),
                ('custom_orientation', models.CharField(blank=True, max_length=10)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Administrator notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='players.group')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['name'],
            },
        ),
    ]

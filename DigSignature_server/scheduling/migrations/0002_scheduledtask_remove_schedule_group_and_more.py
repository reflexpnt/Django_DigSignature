# Generated by Django 5.2.1 on 2025-07-24 19:18

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('players', '0003_devicelog'),
        ('playlists', '0002_alter_playlistitem_options_and_more'),
        ('scheduling', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScheduledTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('cleanup_logs', 'Cleanup Old Logs'), ('update_check', 'Check for Updates'), ('backup_data', 'Backup Data'), ('generate_reports', 'Generate Reports'), ('sync_all_players', 'Sync All Players')], max_length=20)),
                ('name', models.CharField(max_length=200)),
                ('schedule_pattern', models.CharField(help_text='Cron pattern: * * * * * (minute hour day month weekday)', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scheduled Task',
                'verbose_name_plural': 'Scheduled Tasks',
                'ordering': ['name'],
            },
        ),
        migrations.RemoveField(
            model_name='schedule',
            name='group',
        ),
        migrations.RemoveField(
            model_name='schedule',
            name='playlist',
        ),
        migrations.RenameField(
            model_name='deployment',
            old_name='scheduled_deploy_time',
            new_name='deployed_at',
        ),
        migrations.RemoveField(
            model_name='deployment',
            name='completed_players',
        ),
        migrations.RemoveField(
            model_name='deployment',
            name='deploy_immediately',
        ),
        migrations.RemoveField(
            model_name='deployment',
            name='failed_players',
        ),
        migrations.RemoveField(
            model_name='deployment',
            name='playlist',
        ),
        migrations.RemoveField(
            model_name='deployment',
            name='started_at',
        ),
        migrations.RemoveField(
            model_name='deployment',
            name='total_players',
        ),
        migrations.AddField(
            model_name='deployment',
            name='created_by',
            field=models.CharField(default='system', max_length=100),
        ),
        migrations.AddField(
            model_name='deployment',
            name='error_message',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='deployment',
            name='failure_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='deployment',
            name='playlists',
            field=models.ManyToManyField(related_name='deployments', to='playlists.playlist'),
        ),
        migrations.AddField(
            model_name='deployment',
            name='restart_players',
            field=models.BooleanField(default=False, help_text='Restart players after deployment'),
        ),
        migrations.AddField(
            model_name='deployment',
            name='scheduled_at',
            field=models.DateTimeField(blank=True, help_text='When to deploy (null = deploy immediately)', null=True),
        ),
        migrations.AddField(
            model_name='deployment',
            name='success_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='deployment',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='force_sync',
            field=models.BooleanField(default=False, help_text='Force full sync even if no changes detected'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployments', to='players.group'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='name',
            field=models.CharField(help_text='Deployment name/description', max_length=200),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20),
        ),
        migrations.CreateModel(
            name='DeploymentPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('syncing', 'Syncing'), ('success', 'Success'), ('failed', 'Failed'), ('timeout', 'Timeout')], default='pending', max_length=20)),
                ('sync_started_at', models.DateTimeField(blank=True, null=True)),
                ('sync_completed_at', models.DateTimeField(blank=True, null=True)),
                ('assets_synced', models.PositiveIntegerField(default=0)),
                ('bytes_transferred', models.PositiveBigIntegerField(default=0)),
                ('sync_hash_sent', models.CharField(blank=True, max_length=64)),
                ('sync_hash_confirmed', models.CharField(blank=True, max_length=64)),
                ('error_message', models.TextField(blank=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_results', to='scheduling.deployment')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='players.player')),
            ],
            options={
                'ordering': ['player__name'],
                'unique_together': {('deployment', 'player')},
            },
        ),
        migrations.CreateModel(
            name='EmergencyAcknowledgement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acknowledged_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='players.player')),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('display_duration', models.PositiveIntegerField(default=30, help_text='Duration to display message in seconds')),
                ('background_color', models.CharField(default='#ff0000', max_length=7)),
                ('text_color', models.CharField(default='#ffffff', max_length=7)),
                ('font_size', models.PositiveIntegerField(default=48)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.CharField(default='admin', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_by', models.ManyToManyField(related_name='acknowledged_emergencies', through='scheduling.EmergencyAcknowledgement', to='players.player')),
                ('groups', models.ManyToManyField(blank=True, related_name='emergency_messages', to='players.group')),
                ('players', models.ManyToManyField(blank=True, related_name='emergency_messages', to='players.player')),
            ],
            options={
                'verbose_name': 'Emergency Message',
                'verbose_name_plural': 'Emergency Messages',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='emergencyacknowledgement',
            name='emergency_message',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.emergencymessage'),
        ),
        migrations.CreateModel(
            name='SyncRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_timestamp', models.DateTimeField(auto_now_add=True)),
                ('client_sync_hash', models.CharField(blank=True, max_length=64)),
                ('app_version', models.CharField(blank=True, max_length=20)),
                ('firmware_version', models.CharField(blank=True, max_length=20)),
                ('needs_sync', models.BooleanField(default=False)),
                ('server_sync_hash', models.CharField(blank=True, max_length=64)),
                ('response_timestamp', models.DateTimeField(blank=True, null=True)),
                ('battery_level', models.PositiveIntegerField(blank=True, null=True)),
                ('storage_free_mb', models.PositiveIntegerField(blank=True, null=True)),
                ('connection_type', models.CharField(blank=True, max_length=20)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_requests', to='players.player')),
            ],
            options={
                'verbose_name': 'Sync Request',
                'verbose_name_plural': 'Sync Requests',
                'ordering': ['-request_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_type', models.CharField(choices=[('reboot', 'Reboot Player'), ('restart_app', 'Restart Application'), ('update_software', 'Update Software'), ('clear_cache', 'Clear Cache'), ('screenshot', 'Take Screenshot'), ('shell_command', 'Custom Shell Command'), ('tv_on', 'Turn TV On'), ('tv_off', 'Turn TV Off'), ('set_volume', 'Set Volume')], max_length=20)),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='Command parameters (e.g., shell command, volume level)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('executed', 'Executed'), ('failed', 'Failed'), ('timeout', 'Timeout')], default='pending', max_length=10)),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('executed_at', models.DateTimeField(blank=True, null=True)),
                ('success_count', models.PositiveIntegerField(default=0)),
                ('failure_count', models.PositiveIntegerField(default=0)),
                ('results', models.JSONField(blank=True, default=dict)),
                ('created_by', models.CharField(default='admin', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('players', models.ManyToManyField(related_name='system_commands', to='players.player')),
            ],
            options={
                'verbose_name': 'System Command',
                'verbose_name_plural': 'System Commands',
                'ordering': ['-created_at'],
            },
        ),
        migrations.DeleteModel(
            name='DeploymentLog',
        ),
        migrations.DeleteModel(
            name='Schedule',
        ),
        migrations.AlterUniqueTogether(
            name='emergencyacknowledgement',
            unique_together={('emergency_message', 'player')},
        ),
    ]
